openapi: 3.1.0
info:
  title: AstraDesk Admin API
  version: 1.0.0
  description: API for AstraDesk Admin v1.0 - operational and governance panel for agents, data, policies, and audits.
  contact:
    email: ops@astradesk
servers:
  - url: http://localhost:8080/api/admin/v1
    description: Local development server
  - url: https://api.astradesk.com/api/admin/v1
    description: Production server
tags:
  - name: Dashboard
    description: System health and usage metrics
  - name: Agents
    description: Manage agents (CRUD, test, promote)
  - name: Intent Graph
    description: Read-only intent graph operations
  - name: Flows
    description: Alpha flows management
  - name: Datasets
    description: Manage datasets and reindexing
  - name: Tools/Connectors
    description: Manage tools and connectors
  - name: Keys & Secrets
    description: Manage secrets (rotate, disable)
  - name: Runs & Logs
    description: View runs and logs
  - name: Jobs & Schedules
    description: Manage jobs and schedules
  - name: Users & Roles
    description: RBAC user and role management
  - name: Policies
    description: OPA policy management
  - name: Audit Trail
    description: Immutable audit logs
  - name: Settings
    description: Platform settings
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Short-lived JWT with role claims
  schemas:
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          example: "Resource not found"
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, down]
        components:
          type: object
          additionalProperties:
            type: string
    UsageMetrics:
      type: object
      properties:
        total_requests:
          type: integer
        cost_usd:
          type: number
        latency_p95_ms:
          type: number
    Agent:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        env:
          type: string
          enum: [draft, dev, staging, prod]
        status:
          type: string
        config:
          type: object
    Flow:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        graph:
          type: object
    Dataset:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [s3, postgres, git]
        indexing_status:
          type: string
    Connector:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
    Secret:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        last_used_at:
          type: string
          format: date-time
    Run:
      type: object
      properties:
        id:
          type: string
        agent_id:
          type: string
        status:
          type: string
        latency_ms:
          type: number
        cost_usd:
          type: number
    Job:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        schedule_expr:
          type: string
        status:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, operator, viewer]
    Policy:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        rego_text:
          type: string
    AuditEntry:
      type: object
      properties:
        id:
          type: string
        when_ts:
          type: string
          format: date-time
        user_id:
          type: string
        action:
          type: string
        resource:
          type: string
        signature:
          type: string
    Setting:
      type: object
      properties:
        group:
          type: string
        key:
          type: string
        value:
          type: object
paths:
  /health:
    get:
      tags: [Dashboard]
      summary: Get system health status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /usage/llm:
    get:
      tags: [Dashboard]
      summary: Get LLM usage metrics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Usage metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageMetrics'
  /errors/recent:
    get:
      tags: [Dashboard]
      summary: Get recent errors
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of recent errors
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /agents:
    get:
      tags: [Agents]
      summary: List agents
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'
    post:
      tags: [Agents]
      summary: Create agent
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
      responses:
        '201':
          description: Created agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
  /agents/{id}:
    put:
      tags: [Agents]
      summary: Update agent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
      responses:
        '200':
          description: Updated agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
  /agents/{id}:test:
    post:
      tags: [Agents]
      summary: Test agent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Test result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
  /agents/{id}:clone:
    post:
      tags: [Agents]
      summary: Clone agent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Cloned agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
  /agents/{id}:promote:
    post:
      tags: [Agents]
      summary: Promote agent to next env
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Promoted agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
  /agents/{id}/metrics:
    get:
      tags: [Agents]
      summary: Get agent metrics
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: p95
          in: query
          schema:
            type: boolean
        - name: p99
          in: query
          schema:
            type: boolean
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  p95_latency:
                    type: number
  /agents/{id}/io:
    get:
      tags: [Agents]
      summary: Get recent agent IO
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: tail
          in: query
          schema:
            type: integer
            default: 10
      security:
        - BearerAuth: []
      responses:
        '200':
          description: IO logs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    input:
                      type: string
                    output:
                      type: string
  /intents/graph:
    get:
      tags: [Intent Graph]
      summary: Get intent graph
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Intent graph
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      type: object
                  edges:
                    type: array
                    items:
                      type: object
  /flows:
    get:
      tags: [Flows]
      summary: List flows
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of flows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flow'
    post:
      tags: [Flows]
      summary: Create flow
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flow'
      responses:
        '201':
          description: Created flow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
  /flows/{id}:validate:
    post:
      tags: [Flows]
      summary: Validate flow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string
  /flows/{id}:dryrun:
    post:
      tags: [Flows]
      summary: Dry run flow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dry run result
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      type: object
  /flows/{id}/log:
    get:
      tags: [Flows]
      summary: Get flow log
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Flow log
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /datasets:
    get:
      tags: [Datasets]
      summary: List datasets
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
    post:
      tags: [Datasets]
      summary: Create dataset
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '201':
          description: Created dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
  /datasets/{id}/schema:
    get:
      tags: [Datasets]
      summary: Get dataset schema
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Schema
          content:
            application/json:
              schema:
                type: object
  /datasets/{id}/embeddings:
    get:
      tags: [Datasets]
      summary: Get embeddings metadata
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Embeddings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /datasets/{id}:reindex:
    post:
      tags: [Datasets]
      summary: Reindex dataset
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '202':
          description: Reindexing started
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
  /connectors:
    get:
      tags: [Tools/Connectors]
      summary: List connectors
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of connectors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connector'
    post:
      tags: [Tools/Connectors]
      summary: Create connector
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
      responses:
        '201':
          description: Created connector
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
  /connectors/{id}:test:
    post:
      tags: [Tools/Connectors]
      summary: Test connector
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Test result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /connectors/{id}:probe:
    post:
      tags: [Tools/Connectors]
      summary: Probe connector
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Probe result
          content:
            application/json:
              schema:
                type: object
                properties:
                  latency_ms:
                    type: number
  /secrets:
    get:
      tags: [Keys & Secrets]
      summary: List secrets
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of secrets (masked)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
    post:
      tags: [Keys & Secrets]
      summary: Create secret
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      responses:
        '201':
          description: Created secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
  /secrets/{id}:rotate:
    post:
      tags: [Keys & Secrets]
      summary: Rotate secret
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Rotated secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
  /secrets/{id}:disable:
    post:
      tags: [Keys & Secrets]
      summary: Disable secret
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Disabled secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
  /runs:
    get:
      tags: [Runs & Logs]
      summary: List runs
      parameters:
        - name: agent
          in: query
          schema:
            type: string
        - name: intent
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of runs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Run'
  /runs/stream:
    get:
      tags: [Runs & Logs]
      summary: Stream runs (SSE)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: SSE stream of runs
          content:
            text/event-stream:
              schema:
                type: string
  /runs/{id}:
    get:
      tags: [Runs & Logs]
      summary: Get run details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Run details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
  /logs/export:
    get:
      tags: [Runs & Logs]
      summary: Export logs
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [json, ndjson]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Exported logs
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /jobs:
    get:
      tags: [Jobs & Schedules]
      summary: List jobs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    post:
      tags: [Jobs & Schedules]
      summary: Create job
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          description: Created job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  /jobs/{id}:trigger:
    post:
      tags: [Jobs & Schedules]
      summary: Trigger job
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '202':
          description: Job triggered
          content:
            application/json:
              schema:
                type: object
                properties:
                  run_id:
                    type: string
  /jobs/{id}:pause:
    post:
      tags: [Jobs & Schedules]
      summary: Pause job
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Paused job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  /dlq:
    get:
      tags: [Jobs & Schedules]
      summary: Get DLQ
      security:
        - BearerAuth: []
      responses:
        '200':
          description: DLQ items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /users:
    get:
      tags: [Users & Roles]
      summary: List users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users:invite:
    post:
      tags: [Users & Roles]
      summary: Invite user
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: Invitation sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  invite_id:
                    type: string
  /users/{id}:reset-mfa:
    post:
      tags: [Users & Roles]
      summary: Reset MFA
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: MFA reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /users/{id}:role:
    post:
      tags: [Users & Roles]
      summary: Update user role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /roles:
    get:
      tags: [Users & Roles]
      summary: List roles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /policies:
    get:
      tags: [Policies]
      summary: List policies
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
    post:
      tags: [Policies]
      summary: Create policy
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        '201':
          description: Created policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /policies/{id}:
    put:
      tags: [Policies]
      summary: Update policy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        '200':
          description: Updated policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /policies/{id}:simulate:
    post:
      tags: [Policies]
      summary: Simulate policy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
      responses:
        '200':
          description: Simulation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  allow:
                    type: boolean
                  violations:
                    type: array
                    items:
                      type: string
  /audit:
    get:
      tags: [Audit Trail]
      summary: List audit entries
      parameters:
        - name: user
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
        - name: resource
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of audit entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditEntry'
  /audit/export:
    get:
      tags: [Audit Trail]
      summary: Export audit
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [json, ndjson]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Exported audit
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /audit/{id}:
    get:
      tags: [Audit Trail]
      summary: Get audit entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Audit entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntry'
  /settings/integrations:
    get:
      tags: [Settings]
      summary: Get integrations settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Integrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
    put:
      tags: [Settings]
      summary: Update integrations
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
  /settings/localization:
    get:
      tags: [Settings]
      summary: Get localization settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Localization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
    put:
      tags: [Settings]
      summary: Update localization
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
  /settings/platform:
    get:
      tags: [Settings]
      summary: Get platform settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Platform
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
    put:
      tags: [Settings]
      summary: Update platform
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
security:
  - BearerAuth: []  # Global security