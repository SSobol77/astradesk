# CI pipeline for AstraDesk Framework AI.
# Aligns with pyproject: Python 3.14, project version 0.3.0.
# Runs linting, type-checks, tests with coverage across Python/Java/JS,
# builds Docker images for smoke, and enforces OpenAPI drift guard.
# Project: AstraDesk Framework AI
# Author: Siergej Sobolewski
# Since: 2025-10-25

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.14"

      - name: Sync dependencies (locked)
        run: uv sync --frozen

      - name: OpenAPI drift guard
        run: |
          chmod +x scripts/check-openapi-version.sh
          scripts/check-openapi-version.sh

      - name: Lint & Type Check
        run: |
          uv run ruff check .
          uv run ruff format --check .
          uv run mypy .

      - name: Run Python Tests with Coverage
        run: uv run pytest -q --cov=core/src --cov=services/api-gateway/src --cov=packages --cov-report=xml

      - name: Build Docker Image (Python)
        run: docker build -t astradesk:ci-python -f Dockerfile .

  build-test-java:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "25"
          distribution: "temurin"

      - name: Build and Test Java Adapter
        working-directory: services/ticket-adapter-java
        run: |
          ./gradlew build --no-daemon
          ./gradlew test jacocoTestReport --no-daemon

      - name: Build Docker Image (Java)
        working-directory: services/ticket-adapter-java
        run: docker build -t astradesk:ci-java .

  build-test-js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: services/admin-portal/package-lock.json

      - name: Install Dependencies
        working-directory: services/admin-portal
        run: npm ci

      - name: Run Tests with Coverage
        working-directory: services/admin-portal
        run: npm run test -- --coverage

      - name: Build Next.js
        working-directory: services/admin-portal
        run: npm run build

      - name: Build Docker Image (JS)
        working-directory: services/admin-portal
        run: docker build -t astradesk:ci-js .

  sonar-scan:
    runs-on: ubuntu-latest
    needs: [build-test-python, build-test-java, build-test-js]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.14"

      - uses: actions/setup-java@v4
        with:
          java-version: "25"
          distribution: "temurin"

      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: services/admin-portal/package-lock.json

      - name: Re-generate Coverage Reports (ensure availability)
        run: |
          uv sync --frozen
          uv run pytest -q --cov=core/src --cov=services/api-gateway/src --cov=packages --cov-report=xml
          cd services/ticket-adapter-java && ./gradlew test jacocoTestReport --no-daemon
          cd ../admin-portal && npm ci && npm run test -- --coverage

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          docker run --rm \
            -v "$PWD:/usr/src" \
            -e SONAR_HOST_URL="https://sonarcloud.io" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            sonarsource/sonar-scanner-cli:latest \
            -Dsonar.projectVersion=0.3.0 \  # ‚üµ per pyproject version
            -Dsonar.scm.revision="${GITHUB_SHA}"
