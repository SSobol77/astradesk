/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get system health status
         * @description Retrieves a high-level status of the entire platform and its core components.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description System is healthy. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthStatus"];
                    };
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Service is unavailable or in a degraded state. */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usage/llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get platform-wide LLM usage metrics
         * @description Retrieves aggregated metrics such as total requests, total cost, and latency percentiles.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Aggregated usage metrics. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UsageMetrics"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/errors/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List recent errors and exceptions
         * @description Retrieves a paginated list of the most recent system errors for quick diagnosis.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of recent errors. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: date-time */
                            timestamp?: string;
                            message?: string;
                            trace_id?: string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all agents
         * @description Retrieves a paginated list of all configured agents.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of agents. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new agent
         * @description Creates a new agent in a 'draft' environment.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AgentConfigRequest"];
                };
            };
            responses: {
                /** @description The newly created agent. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get agent details
         * @description Retrieves the full details of a specific agent.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the agent. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested agent. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
                /** @description Agent not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        /**
         * Update an agent's configuration
         * @description Updates the name and/or configuration of an existing agent.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the agent to update. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AgentConfigRequest"];
                };
            };
            responses: {
                /** @description The updated agent. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
                /** @description Agent not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{id}:test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run a test query against an agent
         * @description Executes a dry-run of the agent with a given input to test its behavior.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example Test query for the agent. */
                        input: string;
                    };
                };
            };
            responses: {
                /** @description The result of the test run. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            output?: string;
                            invoked_tools?: Record<string, never>[];
                        };
                    };
                };
                /** @description Agent not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{id}:clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clone agent */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cloned agent */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{id}:promote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Promote agent to next env */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Promoted agent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get agent performance metrics
         * @description Retrieves key performance indicators (KPIs) like latency percentiles for a specific agent.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The time window for calculating metrics (e.g., '1h', '24h'). */
                    timeWindow?: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Agent performance metrics. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            p95_latency_ms?: number;
                            p99_latency_ms?: number;
                            request_count?: number;
                        };
                    };
                };
                /** @description Agent not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{id}/io": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent agent input/output pairs
         * @description Retrieves a paginated list of the most recent interactions (input and output) for a specific agent.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of I/O logs. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: date-time */
                            timestamp?: string;
                            input?: string;
                            output?: string;
                        }[];
                    };
                };
                /** @description Agent not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents/graph": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the complete intent graph
         * @description Retrieves the entire intent graph, including all nodes and edges, for visualization and analysis.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The complete intent graph structure. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            nodes?: components["schemas"]["GraphNode"][];
                            edges?: components["schemas"]["GraphEdge"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List flows */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of flows */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Flow"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new flow */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FlowCreateRequest"];
                };
            };
            responses: {
                /** @description The newly created flow. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Flow"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get flow details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested flow. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Flow"];
                    };
                };
                /** @description Flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/{id}:validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate flow */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Validation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            valid?: boolean;
                            errors?: string[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/{id}:dryrun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Dry run flow */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dry run result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            steps?: Record<string, never>[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/{id}/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the execution log for a specific flow
         * @description Retrieves a paginated list of log entries for a given flow.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of flow log entries. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: date-time */
                            timestamp?: string;
                            /** @enum {string} */
                            level?: "INFO" | "WARN" | "ERROR";
                            message?: string;
                        }[];
                    };
                };
                /** @description Flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List datasets */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of datasets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Dataset"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new dataset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DatasetCreateRequest"];
                };
            };
            responses: {
                /** @description The newly created dataset. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Dataset"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get dataset details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested dataset. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Dataset"];
                    };
                };
                /** @description Dataset not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a dataset */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The dataset was successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Dataset not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{id}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the schema of a dataset
         * @description Retrieves the data schema inferred from the dataset source.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The dataset schema. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Dataset not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{id}/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get embeddings metadata for a dataset
         * @description Retrieves a paginated list of metadata for all embeddings generated from this dataset.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of embeddings metadata. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingMetadata"][];
                    };
                };
                /** @description Dataset not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{id}:reindex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trigger a reindexing job for a dataset
         * @description Starts an asynchronous job to re-process and re-embed all data from the dataset's source.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Reindexing job has been accepted and started. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            job_id?: string;
                        };
                    };
                };
                /** @description Dataset not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description A reindexing job for this dataset is already in progress. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List connectors */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of connectors */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Connector"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new connector */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ConnectorConfigRequest"];
                };
            };
            responses: {
                /** @description The newly created connector. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Connector"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connectors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get connector details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested connector. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Connector"];
                    };
                };
                /** @description Connector not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        /** Update a connector's configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ConnectorConfigRequest"];
                };
            };
            responses: {
                /** @description The updated connector. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Connector"];
                    };
                };
                /** @description Connector not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a connector */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The connector was successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Connector not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connectors/{id}:test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test a connector's connection
         * @description Performs a live test to verify that the connector can successfully authenticate and connect to the external service.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The result of the connection test. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /**
                             * @description A detailed message, especially in case of failure.
                             * @example Authentication failed: Invalid API key.
                             */
                            message?: string;
                        };
                    };
                };
                /** @description Connector not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connectors/{id}:probe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Probe a connector's latency
         * @description Sends a lightweight request to the external service to measure connection latency.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The result of the latency probe. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            /** @description The round-trip time in milliseconds. */
                            latency_ms?: number;
                        };
                    };
                };
                /** @description Connector not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List secret metadata
         * @description Retrieves a paginated list of metadata for all configured secrets. The secret values are never returned.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of secret metadata objects. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SecretMetadata"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new secret
         * @description Securely creates a new secret. The provided value is write-only and cannot be retrieved later.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SecretCreateRequest"];
                };
            };
            responses: {
                /** @description The metadata for the newly created secret. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SecretMetadata"];
                    };
                };
                /** @description Invalid request body (e.g., missing name or value). */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secrets/{id}:rotate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rotate a secret's value
         * @description Generates a new random value for the specified secret and invalidates the old one.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the secret to rotate. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The metadata of the rotated secret, including its new value. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SecretCreateRequest"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description The secret with the specified ID was not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secrets/{id}:disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Disable (delete) a secret
         * @description Permanently disables and deletes the specified secret. This action cannot be undone.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the secret to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The secret was successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description The secret with the specified ID was not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List and filter agent runs
         * @description Retrieves a paginated list of historical agent runs, with support for filtering.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter runs by a specific agent ID. */
                    agentId?: string;
                    /** @description Filter runs by status (e.g., 'success', 'failed'). */
                    status?: string;
                    /** @description The start of the time range to filter runs (ISO 8601 format). */
                    from?: string;
                    /** @description The end of the time range to filter runs (ISO 8601 format). */
                    to?: string;
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of agent runs. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Run"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runs/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream new agent runs in real-time (SSE)
         * @description Establishes a Server-Sent Events (SSE) connection to stream new agent
         *     runs as they are completed. Clients can use filters to subscribe only
         *     to relevant events.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter stream to only include runs from a specific agent ID. */
                    agentId?: string;
                    /** @description Filter stream by final run status. */
                    status?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An open SSE stream of `Run` objects. */
                200: {
                    headers: {
                        /** @description Must be `text/event-stream`. */
                        "Content-Type"?: string;
                        /** @description Must be `no-cache`. */
                        "Cache-Control"?: string;
                        /** @description Must be `keep-alive`. */
                        Connection?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": components["schemas"]["Run"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details for a specific run
         * @description Retrieves the complete details of a single agent run, including its status, latency, cost, and associated metadata.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the agent run. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The detailed information about the requested run. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Run"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description The run with the specified ID was not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export agent run logs
         * @description Downloads a file containing detailed logs for agent runs based on the provided filters.
         *     The data is streamed directly to the client, making it suitable for large datasets.
         */
        get: {
            parameters: {
                query: {
                    /** @description The format of the exported file. */
                    format: "json" | "ndjson" | "csv";
                    /** @description Filter logs by a specific agent ID. */
                    agentId?: string;
                    /** @description Filter logs by run status (e.g., 'success', 'failed'). */
                    status?: string;
                    /** @description The start of the time range for the export (ISO 8601 format). */
                    from?: string;
                    /** @description The end of the time range for the export (ISO 8601 format). */
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The agent run logs export file. */
                200: {
                    headers: {
                        /** @description Suggests a filename for the browser to save the file as. */
                        "Content-Disposition"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/x-ndjson": string;
                        "application/json": string;
                    };
                };
                /** @description Invalid filter parameters provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List jobs */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of jobs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"][];
                    };
                };
                /** @description Invalid filter parameters provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new scheduled job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["JobCreateRequest"];
                };
            };
            responses: {
                /** @description The newly created job. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get job details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested job. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Job not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        /** Update a job */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["JobCreateRequest"];
                };
            };
            responses: {
                /** @description The updated job. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Job not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a job */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The job was successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Job not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}:trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job triggered */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            run_id?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Job not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}:pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paused job */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Job not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}:resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume a paused job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The resumed job. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Job not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dlq": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List items from the Dead-Letter Queue
         * @description Retrieves a paginated list of failed messages or events that could not be processed.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of DLQ items. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DLQItem"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /** Create or invite a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserCreateRequest"];
                };
            };
            responses: {
                /** @description The user was created or invited. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Invalid request body (e.g., invalid email or role). */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description A user with this email already exists. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested user. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The user was successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}:reset-mfa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset MFA */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description MFA reset */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a user's role */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserRoleUpdateRequest"];
                };
            };
            responses: {
                /** @description The user with the updated role. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available roles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of available role names. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List policies */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of policies */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Policy"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new policy */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PolicyCreateRequest"];
                };
            };
            responses: {
                /** @description The newly created policy. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Policy"];
                    };
                };
                /** @description Invalid filter parameters provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get policy details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested policy. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Policy"];
                    };
                };
                /** @description Policy not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        /** Update a policy */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PolicyCreateRequest"];
                };
            };
            responses: {
                /** @description The updated policy. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Policy"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Policy not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a policy */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The policy was successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Policy not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/{id}:simulate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate a policy against a given input
         * @description Allows for dry-running a policy to see the outcome without enforcing it.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PolicySimulationRequest"];
                };
            };
            responses: {
                /** @description The result of the policy simulation. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The decision of the policy (true for allow, false for deny). */
                            allow?: boolean;
                            /** @description A list of reasons for the denial, if applicable. */
                            violations?: string[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Policy not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List and filter audit trail entries
         * @description Retrieves a paginated list of immutable audit log entries, with support for filtering.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter audit entries by user ID. */
                    userId?: string;
                    /** @description Filter by a specific action name (e.g., 'agent.run', 'user.login'). */
                    action?: string;
                    /** @description Filter by the resource that was acted upon. */
                    resource?: string;
                    /** @description The start of the time range to filter entries (ISO 8061 format). */
                    from?: string;
                    /** @description The end of the time range to filter entries (ISO 8061 format). */
                    to?: string;
                    /** @description Maximum number of items to return per page. */
                    limit?: components["parameters"]["PaginationLimit"];
                    /** @description Number of items to skip for pagination. */
                    offset?: components["parameters"]["PaginationOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of audit entries. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuditEntry"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export audit trail data
         * @description Downloads a file containing audit log entries based on the provided filters.
         *     The data is streamed directly to the client, making it suitable for large datasets.
         */
        get: {
            parameters: {
                query: {
                    /** @description The format of the exported file. */
                    format: "json" | "ndjson" | "csv";
                    /** @description Filter audit entries by user ID. */
                    userId?: string;
                    /** @description Filter by a specific action name (e.g., 'agent.run'). */
                    action?: string;
                    /** @description The start of the time range for the export (ISO 8601 format). */
                    from?: string;
                    /** @description The end of the time range for the export (ISO 8601 format). */
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The audit log export file. The filename is suggested in the Content-Disposition header. */
                200: {
                    headers: {
                        /** @description Suggests a filename for the browser to save the file as. */
                        "Content-Disposition"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/x-ndjson": string;
                        "application/json": string;
                    };
                };
                /** @description Invalid filter parameters provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single audit entry by its ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the audit entry. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested audit entry. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuditEntry"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Audit entry not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/{group}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all settings for a specific group
         * @description Retrieves a collection of key-value settings for a given configuration group (e.g., 'integrations', 'platform').
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    group: "integrations" | "localization" | "platform";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of settings for the specified group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Setting"][];
                    };
                };
                /** @description The settings group was not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        /**
         * Update a specific setting within a group
         * @description Updates the value of a single setting identified by its key within a group.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    group: "integrations" | "localization" | "platform";
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        key: string;
                        value: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description The updated setting. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Setting"];
                    };
                };
                /** @description The specified key does not exist in this group or the value is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
                /** @description The settings group was not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetail"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domain-packs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List installed domain packs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of packs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DomainPack"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domain-packs/{name}:install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Install a domain pack by name */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Install job accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            job_id?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domain-packs/{name}:uninstall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Uninstall a domain pack by name */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Uninstall job accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            job_id?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description A standard error response format compliant with RFC 7807 (Problem Details for HTTP APIs).
         *     This ensures consistent and machine-readable error handling.
         */
        ProblemDetail: {
            /**
             * Format: uri
             * @description A URI identifier for the problem type.
             * @example https://astradesk.com/errors/authentication-failed
             */
            type?: string;
            /**
             * @description A short, human-readable summary of the problem type.
             * @example Authentication Failed
             */
            title?: string;
            /**
             * @description The HTTP status code.
             * @example 401
             */
            status?: number;
            /**
             * @description A human-readable explanation specific to this occurrence of the problem.
             * @example The provided JWT token has expired.
             */
            detail?: string;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             * @example /api/admin/v1/agents/123
             */
            instance?: string;
        };
        HealthStatus: {
            /** @enum {string} */
            status?: "healthy" | "degraded" | "down";
            components?: {
                [key: string]: string;
            };
        };
        UsageMetrics: {
            total_requests?: number;
            cost_usd?: number;
            latency_p95_ms?: number;
        };
        Agent: {
            id?: string;
            name?: string;
            version?: string;
            /** @enum {string} */
            env?: "draft" | "dev" | "staging" | "prod";
            status?: string;
            config?: Record<string, never>;
        };
        /** @description Payload for creating or updating an agent's configuration. */
        AgentConfigRequest: {
            /** @description A unique, human-readable name for the agent. */
            name: string;
            /** @description The configuration object for the agent (e.g., model, prompts, tool settings). */
            config: {
                [key: string]: unknown;
            };
        };
        Dataset: {
            id?: string;
            name?: string;
            /** @enum {string} */
            type?: "s3" | "postgres" | "git";
            indexing_status?: string;
        };
        Connector: {
            id?: string;
            name?: string;
            type?: string;
        };
        Run: {
            id?: string;
            agent_id?: string;
            status?: string;
            latency_ms?: number;
            cost_usd?: number;
        };
        Job: {
            id?: string;
            name?: string;
            schedule_expr?: string;
            status?: string;
        };
        User: {
            id?: string;
            email?: string;
            /** @enum {string} */
            role?: "admin" | "operator" | "viewer";
        };
        Policy: {
            id?: string;
            name?: string;
            rego_text?: string;
        };
        PolicySimulationRequest: {
            /** @description A JSON object representing the input to be evaluated against the policy. */
            input: {
                [key: string]: unknown;
            };
        };
        SettingUpdateRequest: {
            /** @description The new value for the setting. */
            value: {
                [key: string]: unknown;
            };
        };
        AuditEntry: {
            id?: string;
            /** Format: date-time */
            when_ts?: string;
            user_id?: string;
            action?: string;
            resource?: string;
            signature?: string;
        };
        Setting: {
            group?: string;
            key?: string;
            value?: Record<string, never>;
        };
        Flow: {
            /** Format: uuid */
            id?: string;
            name?: string;
            version?: string;
            /** @enum {string} */
            status?: "active" | "draft" | "archived";
            /** @enum {string} */
            env?: "draft" | "dev" | "staging" | "prod";
            /** @description The YAML configuration of the flow. */
            config_yaml?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        FlowUpdateRequest: {
            name?: string;
            /** @enum {string} */
            status?: "active" | "draft" | "archived";
            /** @description Updated YAML configuration. */
            config_yaml: string;
        };
        Secret: {
            id?: string;
            name?: string;
            type?: string;
            /** Format: date-time */
            last_used_at?: string;
        };
        /** @description Payload for creating a new secret. */
        SecretCreateRequest: {
            /**
             * @description A unique, human-readable name for the secret.
             * @example openai-api-key
             */
            name: string;
            /**
             * Format: password
             * @description The actual secret value. This value is write-only and never returned by the API.
             * @example sk-...
             */
            value: string;
            /**
             * @description An optional type hint for the secret (e.g., 'api-key', 'db-password').
             * @example api-key
             */
            type?: string;
        };
        /** @description Metadata of a secret, without exposing the secret value itself. */
        SecretMetadata: {
            /**
             * Format: uuid
             * @description The unique identifier of the secret.
             */
            id?: string;
            /** @description The human-readable name of the secret. */
            name?: string;
            /** @description The type of the secret. */
            type?: string;
            /**
             * Format: date-time
             * @description Timestamp of when the secret was last used.
             */
            last_used_at?: string;
            /**
             * Format: date-time
             * @description Timestamp of when the secret was created.
             */
            created_at?: string;
        };
        GraphNode: {
            /** @description Unique identifier for the node. */
            id?: string;
            /** @description Human-readable label for the node. */
            label?: string;
            /**
             * @description The type of the node.
             * @enum {string}
             */
            type?: "intent" | "entity" | "tool";
        };
        GraphEdge: {
            /** @description The ID of the source node. */
            source?: string;
            /** @description The ID of the target node. */
            target?: string;
            /** @description A label describing the relationship. */
            label?: string;
        };
        FlowCreateRequest: {
            name: string;
            /** @description The graph definition for the flow. */
            graph: Record<string, never>;
        };
        DatasetCreateRequest: {
            /** @description A unique, human-readable name for the dataset. */
            name: string;
            /**
             * @description The source type of the dataset.
             * @enum {string}
             */
            type: "s3" | "postgres" | "git";
        };
        EmbeddingMetadata: {
            /** @description Unique identifier for the embedded chunk/document. */
            id?: string;
            /** @description The original source of the chunk (e.g., file path). */
            source?: string;
            /** Format: date-time */
            created_at?: string;
        };
        ConnectorConfigRequest: {
            /** @description A unique, human-readable name for the connector. */
            name: string;
            /** @description The type of the connector (e.g., 'jira', 'prometheus', 'slack'). */
            type: string;
            /** @description Configuration object for the connector, containing credentials and settings. */
            config: {
                [key: string]: unknown;
            };
        };
        JobCreateRequest: {
            name: string;
            /** @description CRON expression for the schedule. */
            schedule_expr: string;
            /** @description The definition of the task to be executed. */
            task_definition: Record<string, never>;
        };
        DLQItem: {
            /** Format: uuid */
            id?: string;
            original_message?: Record<string, never>;
            error_message?: string;
            /** Format: date-time */
            failed_at?: string;
        };
        UserCreateRequest: {
            /** Format: email */
            email: string;
            /** @enum {string} */
            role: "admin" | "operator" | "viewer";
        };
        UserRoleUpdateRequest: {
            /** @enum {string} */
            role: "admin" | "operator" | "viewer";
        };
        PolicyCreateRequest: {
            name: string;
            /** @description The policy content in Rego language. */
            rego_text: string;
        };
        DomainPack: {
            name?: string;
            version?: string;
            /** @enum {string} */
            status?: "installed" | "error" | "disabled";
        };
    };
    responses: never;
    parameters: {
        /** @description Maximum number of items to return per page. */
        PaginationLimit: number;
        /** @description Number of items to skip for pagination. */
        PaginationOffset: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
