// SPDX-License-Identifier: Apache-2.0
// File: Jenkinsfile v2 alfa refactoring
// Description:
//     Production Jenkins pipeline for AstraDesk.
//     Handles checkout, code analysis, testing (Python3.14, Java25, Node.js), Docker build/push,
//     Istio configuration application, and Helm deployment.
//     Integrates with deploy/istio/, deploy/chart/, and Admin API (/secrets).
// Author: Siergej Sobolewski
// Since: 2025-10-22

pipeline {
    agent none

    environment {
        REGISTRY_URL = "docker.io/youruser"  // Change to your Docker registry
        IMAGE_TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        KUBE_CREDENTIALS_ID = 'kubeconfig-astradesk'  // Kubernetes credentials ID
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                checkout scm
                stash name: 'source', includes: '**/*'
            }
        }

        stage('Code Analysis & Tests') {
            parallel {
                stage('Analyze & Test Python') {
                    agent { docker { image 'python:3.14-slim' } }  // Updated to Python 3.14
                    steps {
                        unstash 'source'
                        cache(path: '.venv', key: "venv-py-${checksum 'uv.lock'}") {
                            sh 'pip install --no-cache-dir uv'
                            sh 'uv sync --all-extras --frozen'
                        }
                        sh 'uv run ruff check .'
                        sh 'uv run mypy .'
                        sh 'uv run pytest --cov --cov-report=xml --junitxml=pytest-report.xml'
                        stash name: 'coverage-py', includes: 'coverage.xml,pytest-report.xml'
                    }
                }
                stage('Analyze & Test Java') {
                    agent { docker { image 'gradle:jdk25' } }  // Updated to Java 25
                    steps {
                        unstash 'source'
                        cache(path: '.gradle/caches', key: "gradle-caches-${checksum '**/*.gradle.kts'}") {
                            sh './gradlew check jacocoTestReport'  // Added jacoco for coverage
                        }
                        stash name: 'coverage-java', includes: '**/build/reports/jacoco/test/jacocoTestReport.xml'
                    }
                }
                stage('Analyze & Test Node.js') {
                    agent { docker { image 'node:22-alpine' } }
                    steps {
                        unstash 'source'
                        cache(path: 'services/admin-portal/node_modules', key: "npm-modules-${checksum 'services/admin-portal/package-lock.json'}") {
                            sh 'cd services/admin-portal && npm ci'
                        }
                        sh 'cd services/admin-portal && npm run lint && npm test -- --coverage'
                        stash name: 'coverage-node', includes: 'services/admin-portal/coverage/**'
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            agent { docker { image 'docker:25' } }
            steps {
                unstash 'source'
                script {
                    withDockerRegistry(credentialsId: 'docker-credentials', url: 'https://index.docker.io/v1/') {
                        def images = [
                            "api": ".",
                            "ticket": "services/ticket-adapter-java",
                            "admin": "services/admin-portal",
                            "auditor": "services/auditor"
                        ]
                        images.each { name, path ->
                            def imageName = "${REGISTRY_URL}/astradesk-${name}:${IMAGE_TAG}"
                            sh "docker build --cache-from ${imageName} -t ${imageName} ${path}"
                            sh "docker push ${imageName}"
                        }
                    }
                }
            }
        }

        stage('Apply Istio Configs') {
            agent { docker { image 'bitnami/kubectl:latest' } }  // Use kubectl image
            steps {
                unstash 'source'
                withCredentials([file(credentialsId: env.KUBE_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
                    retry(3) {  // Retry for transient K8s issues
                        sh 'kubectl apply -f deploy/istio/ --kubeconfig=$KUBECONFIG'
                        sh 'istioctl analyze -n astradesk --kubeconfig=$KUBECONFIG'  // Verify Istio configs
                    }
                }
            }
        }

        stage('Store Certificates in Admin API') {
            agent { docker { image 'bitnami/kubectl:latest' } }
            steps {
                unstash 'source'
                withCredentials([file(credentialsId: env.KUBE_CREDENTIALS_ID, variable: 'KUBECONFIG'), string(credentialsId: 'admin-api-jwt', variable: 'JWT')]) {
                    sh '''
                        kubectl get secret -n astradesk astradesk-mtls-secret -o jsonpath='{.data.tls\\.crt}' --kubeconfig=$KUBECONFIG | base64 -d > mtls-cert.pem
                        curl -X POST http://localhost:8080/api/admin/v1/secrets -H "Authorization: Bearer $JWT" -d '{
                            "name": "astradesk_mtls",
                            "type": "certificate",
                            "value": "'"$(cat mtls-cert.pem)"'"
                        }'
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            agent { docker { image 'alpine/helm:3.15.3' } }
            when { branch 'main' }
            steps {
                unstash 'source'
                withCredentials([file(credentialsId: env.KUBE_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
                    sh """
                        helm upgrade --install astradesk deploy/chart \
                            --set api.image.repository=${REGISTRY_URL}/astradesk-api \
                            --set api.image.tag=${IMAGE_TAG} \
                            --set admin.image.repository=${REGISTRY_URL}/astradesk-admin \
                            --set admin.image.tag=${IMAGE_TAG} \
                            --set ticketAdapter.image.repository=${REGISTRY_URL}/astradesk-ticket \
                            --set ticketAdapter.image.tag=${IMAGE_TAG} \
                            --set auditor.image.repository=${REGISTRY_URL}/astradesk-auditor \
                            --set auditor.image.tag=${IMAGE_TAG} \
                            --namespace astradesk-prod \
                            --create-namespace \
                            --wait --timeout 5m \
                            --kubeconfig=$KUBECONFIG
                    """
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'coverage.xml,**/jacocoTestReport.xml,services/admin-portal/coverage/**', allowEmptyArchive: true
            junit '**/build/test-results/test/TEST-*.xml,pytest-report.xml'
        }
    }
}
