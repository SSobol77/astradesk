// AUTO-GENERATED BY openapi-generator-cli 7.7.0 â€“ DO NOT EDIT MANUALLY.
package admin_api;

// import models.Agent;
import admin_api.models.Agent;
import admin_api.models.ProblemDetail;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class ApiClient {
  private static final MediaType JSON = MediaType.get("application/json; charset=utf-8");

  private final OkHttpClient httpClient;
  private final HttpUrl baseUrl;
  private final ObjectMapper mapper;
  private final String token;

  public ApiClient(String baseUrl, String token) {
    this(HttpUrl.get(baseUrl.endsWith("/") ? baseUrl.substring(0, baseUrl.length() - 1) : baseUrl), token);
  }

  public ApiClient(HttpUrl baseUrl, String token) {
    this.httpClient = new OkHttpClient.Builder()
        .callTimeout(java.time.Duration.ofSeconds(15))
        .connectTimeout(java.time.Duration.ofSeconds(5))
        .readTimeout(java.time.Duration.ofSeconds(15))
        .retryOnConnectionFailure(true)
        .build();
    this.baseUrl = baseUrl;
    this.mapper = new ObjectMapper();
    this.token = token;
  }

  public List<Agent> listAgents(Integer limit, Integer offset) throws IOException {
    HttpUrl.Builder builder = baseUrl.newBuilder().addPathSegments("agents");
    if (limit != null) builder.addQueryParameter("limit", String.valueOf(limit));
    if (offset != null) builder.addQueryParameter("offset", String.valueOf(offset));
    HttpUrl url = builder.build();

    Request request = newRequestBuilder(url).get().build();
    try (Response response = httpClient.newCall(request).execute()) {
      ensureSuccess(response);
      Agent[] agents = mapper.readValue(Objects.requireNonNull(response.body()).bytes(), Agent[].class);
      return Arrays.asList(agents);
    }
  }

  public Agent getAgent(String agentId) throws IOException {
    HttpUrl url = baseUrl.newBuilder().addPathSegments("agents").addPathSegment(agentId).build();
    Request request = newRequestBuilder(url).get().build();
    try (Response response = httpClient.newCall(request).execute()) {
      ensureSuccess(response);
      return mapper.readValue(Objects.requireNonNull(response.body()).bytes(), Agent.class);
    }
  }

  public Agent promoteAgent(String agentId) throws IOException {
    HttpUrl url = baseUrl.newBuilder().addPathSegments("agents").addPathSegment(agentId + ":promote").build();
    Request request = newRequestBuilder(url).post(RequestBody.create(new byte[0], JSON)).build();
    try (Response response = httpClient.newCall(request).execute()) {
      ensureSuccess(response);
      return mapper.readValue(Objects.requireNonNull(response.body()).bytes(), Agent.class);
    }
  }

  public byte[] exportLogs(String format, String agentId, String status, String from, String to) throws IOException {
    HttpUrl.Builder builder = baseUrl.newBuilder().addPathSegments("logs/export");
    if (format != null) builder.addQueryParameter("format", format);
    if (agentId != null) builder.addQueryParameter("agentId", agentId);
    if (status != null) builder.addQueryParameter("status", status);
    if (from != null) builder.addQueryParameter("from", from);
    if (to != null) builder.addQueryParameter("to", to);

    Request request = newRequestBuilder(builder.build()).get().build();
    try (Response response = httpClient.newCall(request).execute()) {
      ensureSuccess(response);
      ResponseBody body = response.body();
      return body != null ? body.bytes() : new byte[0];
    }
  }

  private Request.Builder newRequestBuilder(HttpUrl url) {
    Request.Builder builder = new Request.Builder().url(url);
    if (token != null && !token.isBlank()) {
      builder.addHeader("Authorization", "Bearer " + token);
    }
    return builder;
  }

  private void ensureSuccess(Response response) throws IOException {
    if (response.isSuccessful()) {
      return;
    }
    byte[] payload = Objects.requireNonNull(response.body()).bytes();
    ProblemDetail detail;
    try {
      detail = mapper.readValue(payload, ProblemDetail.class);
    } catch (Exception ex) {
      detail = new ProblemDetail();
      detail.setStatus(response.code());
      detail.setDetail(new String(payload, StandardCharsets.UTF_8));
    }
    throw new IOException("Admin API error " + response.code() + ": " + (detail.getDetail() != null ? detail.getDetail() : detail.getTitle()));
  }
}
